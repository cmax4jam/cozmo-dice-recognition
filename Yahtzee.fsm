import cv2
from cozmo_fsm import *
import numpy as np

class Yahtzee(StateMachineProgram):
    def __init__(self):
        super().__init__(cam_viewer=False, aruco=False, particle_filter=False, annotate_sdk=False)
        self.foundDice = []
        self.dicePose = []
        self.diceValues = []
        self.toSpeak = None
        self.origin = self.robot.pose

        self.findingThresh = 200
        self.pipThresh = 140

    def user_image(self,image,gray):
        self.robot.myimage = gray

    class FindDice(StateNode):
        def start(self,event):
            if self.running: return
            super().start(event)
            image = self.robot.myimage 

            cv2.namedWindow('Image')
            cv2.imshow('Image', image)
            cv2.waitKey(1) 

            #blurred = cv2.GaussianBlur(image, (7, 7), 0)
            blurred = cv2.medianBlur(image, 5)

            #BLOBS!
            #Set up the detector with default parameters.
            params = cv2.SimpleBlobDetector_Params()
            params.minThreshold = 0
            params.maxThreshold = 100

            ver = (cv2.__version__).split('.')
            if int(ver[0]) < 3 :
                detector = cv2.SimpleBlobDetector(params)
            else : 
                detector = cv2.SimpleBlobDetector_create(params)

            detector.empty() 
            keypoints = detector.detect(blurred)
            
            # Show keypoints
            # cv2.imshow("Keypoints", keypoints)
            # cv2.waitKey(1)

            _, blobIm = cv2.threshold(blurred, self.parent.findingThresh, 255, 0, cv2.THRESH_BINARY)

            cv2.namedWindow('Thresholded Image')
            cv2.imshow('Thresholded Image', blobIm)
            cv2.waitKey(1)  
            
            blobIm = cv2.morphologyEx(blobIm, cv2.MORPH_OPEN, np.ones((2,2)))

            # cv2.namedWindow('Good Blobs')
            # cv2.imshow('Good Blobs', blobIm)
            # cv2.waitKey(1) 

            kernel = np.ones((5,5),np.uint8)
            dil = cv2.dilate(blobIm, kernel, iterations = 3)
            erode = cv2.erode(dil, kernel, iterations = 3)

            cv2.namedWindow('dilatedIm')
            cv2.imshow('dilatedIm', erode)
            cv2.waitKey(1)  

            contours_tmp, _ = cv2.findContours(erode, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
            # diceContours = []
            areas = [(i, cv2.contourArea(contours_tmp[i])) for i in range(len(contours_tmp))]
            areas.sort(key=lambda x: x[1])
            areas.reverse()
            minArea = 100
            maxArea = 2500
            # print(areas)
            contours = []
            for area_entry in areas:
                if area_entry[1] < minArea or area_entry[1] > maxArea:
                    continue
                index = area_entry[0]
                contour = contours_tmp[index]
                contours.append(contour)

            # cv2.namedWindow('Thresholded Image')
            # cv2.imshow('Thresholded Image', blurred)
            # cv2.waitKey(0)

            if len(contours) == 0:
                self.post_failure()
                return

            diceContours = contours[0]
            cv2.drawContours(image, [diceContours],0,(0,0,255),1)
            
            x,y,w,h = cv2.boundingRect(diceContours)
            cv2.rectangle(image, (x,y), (x+w,y+h), (255, 0, 0), 2)

            point = self.robot.kine.project_to_ground(x+w/2, y+h)
            pointResult = self.robot.kine.base_to_joint("world").dot(point)
            pose = Pose(pointResult[0][0], pointResult[1][0], pointResult[2][0], angle_z=degrees(math.nan))
            print('found pose', pose)
            self.parent.dicePose.append(pose)
                
            cv2.namedWindow('Contours')
            cv2.imshow('Contours', image)
            cv2.waitKey(1)

            self.post_completion()

    class DoPilot(PilotToPose):
        def start(self, event=None):
            if self.running: return
            print(self.parent.dicePose)
            self.target_pose = self.parent.dicePose[0]
            self.parent.dicePose.pop(0)
            super().start(event)

    class PilotToOrigin(PilotToPose):
        def start(self, event=None):
            if self.running: return
            self.target_pose = self.parent.origin
            super().start(event)

    class DiceRecognition(StateNode):
        def start(self, event):
            if self.running: return
            super().start(event)
            image = self.robot.myimage
            _, image_thresh = cv2.threshold(image, self.parent.pipThresh, 255, 0, cv2.THRESH_BINARY)
            contours,_ = cv2.findContours(image_thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
            
            pipContours = []
            numPips = 0
            areas = [(i, cv2.contourArea(contours[i])) for i in range(len(contours))]
            areas.sort(key=lambda x: x[1])
            areas.reverse()
            minArea = 200
            maxArea = 1000
            # print("----------AREAS", areas)
            for area_entry in areas:
                if area_entry[1] < minArea or area_entry[1] > maxArea:
                    continue
                numPips += 1
                index = area_entry[0]
                contour = contours[index]
                pipContours.append(contour)

            for pips in pipContours:
                cv2.drawContours(image, [pips],0,(0,0,255),1)

            print("*************NUMPIPS", numPips)
            
            cv2.namedWindow('Pips')
            cv2.imshow('Pips', image)
            cv2.waitKey(1)

            self.parent.toSpeak = numPips
            self.parent.diceValues.append(numPips)
            self.post_completion()

    class SpeakResult(Say):
        def start(self, event):
            self.text = self.parent.toSpeak
            super().start(event)

            

    class BestMove(Say):
        def start(self,event):
            #coding dice vals
            pipOccur = [0]*6
            for i in range(6):
                occur = np.count_nonzero(self.parent.diceValues == i+1)
                pipOccur[i] = occur
            
            #LOWER SECTION
            #Yahtzee
            for i in range(6):
                if pipOccur[i] == 5:
                    self.text =  'You got a Yahtzee'
                    super().start(event)
            #Large Straight
            if pipOccur == [1,1,1,1,1,0] or pipOccur == [0,1,1,1,1,1]:
                self.text = 'You got a Large Straight'
                if pipOccur == [1,1,1,1,1,0]:
                    self.text = self.text + 'with dice 1, 2, 3, 4, 5'
                else:
                    self.text = self.text + 'with dice 2, 3, 4, 5, 6'
                super().start(event)
            #Small Straight
            consecutive = 0
            for i in range(6):
                if pipOccur[i] != 0:
                    consecutive += 1
                    if consecutive == 4:
                        self.text = 'You got a Small Straight with dice ' + str(i-2) + str(i-1) + str(i) + str(i+1)
                        super().start(event)
                else:
                    consecutive = 0
            #Full House
            if 2 in pipOccur and 3 in pipOccur:
                self.text =  'You got a Full House with 3 ' + str(pipOccur.index(3)+1) + 'dice and 2 ' + str(pipOccur.index(2)+1) + 'dice'
                super().start(event)
            #Four of a Kind
            if 4 in pipOccur:
                self.text =  'You got 4 of a kind of ' + str(pipOccur.index(4)+1)
                super().start(event)   
            #Three of a kind
            if 3 in pipOccur: 
                self.text =  'You got 3 of a kind of ' + str(pipOccur.index(3)+1)   
                super().start(event) 

            #NO LOWER SECTION
            upperVals = [i * j for i, j in zip(pipOccur, [1,2,3,4,5,6])]
            maxPoints = max(upperVals)
            maxPointsIndex = upperVals.index(maxPoints) #also the index of the pipOccurance
            numMaxPointsDice = pipOccur[maxPointsIndex]
            self.text = 'No lower section dice combinations found. Your best move is the ' + str(numMaxPointsDice) + str(maxPointsIndex + 1) + 'pip dice for ' + str(max(upperVals)) + 'points'
            super().start(event)

    $setup{
        launcher: SetLiftHeight(1) =C=> SetHeadAngle(-20) =C=> StateNode() =T(2)=> loop

        loop: Iterate(range(2)) 
        loop =D=> find

        find: self.FindDice()
        find =F=> Turn(40) =C=> StateNode() =T(0.7)=>find
        find =C=> self.DoPilot() =C=> StateNode() =T(1)=> readPips

        readPips: self.DiceRecognition()
        readPips =C=> self.SpeakResult() =C=> pickup

        pickup: Forward(-40) =C=> MoveLift(-50) =T(2)=> SetLiftHeight(1) =C=> Turn(40) =CNext=> loop

    }